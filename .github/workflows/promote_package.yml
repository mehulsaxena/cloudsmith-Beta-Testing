name: Promote Python Package

on:
  repository_dispatch:
    types: [package_synchronized]

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'interview-mehul-saxena'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example-package'

permissions:
  id-token: write

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Install Cloudsmith CLI
        run: |
          pip install --upgrade cloudsmith-cli

      - name: Authenticate with Cloudsmith (OIDC)
        id: auth
        run: |
          oidc_token=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
          cloudsmith_token=$(curl -X POST -H "Content-Type: application/json" \
            -d "{\"oidc_token\":\"$oidc_token\", \"service_slug\":\"${{ env.CLOUDSMITH_SERVICE_SLUG }}\"}" \
            https://api.cloudsmith.io/openid/${{ env.CLOUDSMITH_NAMESPACE }}/ | jq -r '.token')
          echo "CLOUDSMITH_API_KEY=$cloudsmith_token" >> $GITHUB_ENV

      - name: Debug Webhook Payload
        run: |
          echo "üì© Received webhook payload:"
          echo '${{ toJson(github.event.client_payload) }}'

      # - name: Extract Package Identifier
      #   run: |
      #     PACKAGE_IDENTIFIER="${{ github.event.client_payload.package_identifier }}"
      #     if [ -z "$PACKAGE_IDENTIFIER" ] || [ "$PACKAGE_IDENTIFIER" == "null" ]; then
      #       echo "‚ùå ERROR: Package identifier is missing or empty!"
      #       exit 1
      #     fi
      #     echo "‚úÖ Extracted Package Identifier: $PACKAGE_IDENTIFIER"
      #     echo "PACKAGE_IDENTIFIER=$PACKAGE_IDENTIFIER" >> $GITHUB_ENV
      #   shell: bash

      # - name: Verify Package Existence Before Tagging
      #   run: |
      #     echo "üîç Checking if package exists: $PACKAGE_IDENTIFIER in $CLOUDSMITH_NAMESPACE/$CLOUDSMITH_STAGING_REPO"
      #     PACKAGE_LIST=$(cloudsmith list packages "$CLOUDSMITH_NAMESPACE/$CLOUDSMITH_STAGING_REPO" -F json)
      #     PACKAGE_EXISTS=$(echo "$PACKAGE_LIST" | jq -r ".data[] | select(.slug==\"$PACKAGE_IDENTIFIER\")")
      #     if [ -z "$PACKAGE_EXISTS" ]; then
      #       echo "‚ùå ERROR: Package $PACKAGE_IDENTIFIER not found in $CLOUDSMITH_NAMESPACE/$CLOUDSMITH_STAGING_REPO!"
      #       exit 1
      #     fi
      #     echo "‚úÖ Package found: $PACKAGE_IDENTIFIER"
      #     echo "üîç Package Details:"
      #     echo "$PACKAGE_EXISTS" | jq '.'
      #   shell: bash

      - name: Check Cloudsmith Authentication
        run: |
          cloudsmith whoami
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Add Tags to Cloudsmith Package
        run: |
          cloudsmith whoami
          echo "Listing packages..."
          cloudsmith list packages interview-mehul-saxena/interview-mehul-saxena
          echo "Tag List"
          cloudsmith tags list interview-mehul-saxena/interview-mehul-saxena/example_package-422-py3-none-anywhl-eb9n
          cloudsmith tags add interview-mehul-saxena/interview-mehul-saxena/example_package-422-py3-none-anywhl-eb9n "ready-for-production"
          
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Promote Tagged Packages to Production
        run: |
          PACKAGE_QUERY="tag:ready-for-production"
          echo "üîç Searching for packages with query: $PACKAGE_QUERY"
          PACKAGE_DATA=$(cloudsmith list package \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} \
            -q "$PACKAGE_QUERY" -F json)
          echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm' | while read -r IDENTIFIER; do
            if [ -n "$IDENTIFIER" ] && [ "$IDENTIFIER" != "null" ]; then
              echo "üöÄ Promoting package: $IDENTIFIER"
              cloudsmith mv --yes \
                ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
                ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_PRODUCTION_REPO }}
              if [ $? -eq 0 ]; then
                echo "‚úÖ Successfully promoted package: $IDENTIFIER"
              else
                echo "‚ùå Failed to promote package: $IDENTIFIER"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è No valid package identifiers found for promotion."
            fi
          done
        shell: bash

name: Promote Python Package

# Changed from manual workflow_dispatch to repository_dispatch for webhook
on:
  repository_dispatch:
    types: [package_synchronized]

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example_package'

permissions:
  id-token: write

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # ✅ Install Cloudsmith CLI Before Authentication
      - name: Install Cloudsmith CLI
        run: |
          pip install --upgrade cloudsmith-cli

      - name: Authenticate with Cloudsmith (OIDC)
        id: auth
        run: |
          # Request the GitHub OIDC token
          oidc_token=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')

          # Exchange the OIDC token for a Cloudsmith token
          cloudsmith_token=$(curl -X POST -H "Content-Type: application/json" \
            -d "{\"oidc_token\":\"$oidc_token\", \"service_slug\":\"${{ env.CLOUDSMITH_SERVICE_SLUG }}\"}" \
            https://api.cloudsmith.io/openid/${{ env.CLOUDSMITH_NAMESPACE }}/ | jq -r '.token')

          # Store the Cloudsmith token as an environment variable
          echo "CLOUDSMITH_API_KEY=$cloudsmith_token" >> $GITHUB_ENV

      # ✅ Debug Webhook Payload to Verify Data
      - name: Debug Webhook Payload
        run: |
          echo "Received webhook payload:"
          echo '${{ toJson(github.event.client_payload) }}'

      - name: Process webhook and tag package
        run: |
          # Extract package information from webhook payload
          PACKAGE_IDENTIFIER="${{ github.event.client_payload.package_identifier }}"
          echo "Processing package: $PACKAGE_IDENTIFIER"
          
          # Add ready-for-production tag
          cloudsmith tag add \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$PACKAGE_IDENTIFIER \
            ready-for-production
          
          echo "Tagged package as ready-for-production"
        shell: bash

      - name: Promote tagged packages
        run: |
          # Query for packages with ready-for-production tag
          PACKAGE_QUERY="tag:ready-for-production"
          echo "Searching for packages with query: $PACKAGE_QUERY"
          
          # Get all packages with the ready-for-production tag
          PACKAGE_DATA=$(cloudsmith list package \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} \
            -q "$PACKAGE_QUERY" -F json)
          
          # Extract and process each package identifier
          echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm' | while read -r IDENTIFIER; do
            if [ -n "$IDENTIFIER" ] && [ "$IDENTIFIER" != "null" ]; then
              echo "Promoting package: $IDENTIFIER"
              
              # Promote the package to production
              cloudsmith mv --yes \
                ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
                ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_PRODUCTION_REPO }}
              
              if [ $? -eq 0 ]; then
                echo "Successfully promoted package: $IDENTIFIER"
              else
                echo "Failed to promote package: $IDENTIFIER"
                exit 1
              fi
            fi
          done
        shell: bash
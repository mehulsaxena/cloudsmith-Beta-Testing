name: Promote Python Package

# Changed from manual workflow_dispatch to repository_dispatch for webhook
on:
  repository_dispatch:
    types: [package_synchronized]

env:
  CLOUDSMITH_NAMESPACE: ${{ vars.CLOUDSMITH_NAMESPACE }}
  CLOUDSMITH_STAGING_REPO: 'staging'
  CLOUDSMITH_PRODUCTION_REPO: 'production'
  CLOUDSMITH_SERVICE_SLUG: ${{ vars.CLOUDSMITH_SERVICE_SLUG }}
  PACKAGE_NAME: 'example-package'

permissions:
  id-token: write

jobs:
  promote:
    runs-on: ubuntu-latest

    steps:
      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      # ‚úÖ Install Cloudsmith CLI Before Authentication
      - name: Install Cloudsmith CLI
        run: |
          pip install --upgrade cloudsmith-cli

      - name: Authenticate with Cloudsmith (OIDC)
        id: auth
        run: |
          # Request the GitHub OIDC token
          oidc_token=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')

          # Exchange the OIDC token for a Cloudsmith token
          cloudsmith_token=$(curl -X POST -H "Content-Type: application/json" \
            -d "{\"oidc_token\":\"$oidc_token\", \"service_slug\":\"${{ env.CLOUDSMITH_SERVICE_SLUG }}\"}" \
            https://api.cloudsmith.io/openid/${{ env.CLOUDSMITH_NAMESPACE }}/ | jq -r '.token')

          # Store the Cloudsmith token as an environment variable
          echo "CLOUDSMITH_API_KEY=$cloudsmith_token" >> $GITHUB_ENV

      # ‚úÖ Debug Webhook Payload to Verify Data
      - name: Debug Webhook Payload
        run: |
          echo "üì© Received webhook payload:"
          echo '${{ toJson(github.event.client_payload) }}'

      - name: Extract Package Identifier
        run: |
          PACKAGE_IDENTIFIER="${{ github.event.client_payload.package_identifier }}"

          if [ -z "$PACKAGE_IDENTIFIER" ] || [ "$PACKAGE_IDENTIFIER" == "null" ]; then
            echo "‚ùå ERROR: Package identifier is missing or empty!"
            exit 1
          fi

          echo "‚úÖ Extracted Package Identifier: $PACKAGE_IDENTIFIER"
          echo "PACKAGE_IDENTIFIER=$PACKAGE_IDENTIFIER" >> $GITHUB_ENV
        shell: bash

      - name: Tag Package as Ready for Production
        run: |
          echo "Processing package: $PACKAGE_IDENTIFIER"

          cloudsmith tags add \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$PACKAGE_IDENTIFIER \
            ready-for-production

          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully tagged package: $PACKAGE_IDENTIFIER"
          else
            echo "‚ùå Failed to tag package: $PACKAGE_IDENTIFIER"
            exit 1
          fi
        shell: bash
        env:
          PACKAGE_IDENTIFIER: ${{ env.PACKAGE_IDENTIFIER }}

      - name: Promote Tagged Packages to Production
        run: |
          PACKAGE_QUERY="tag:ready-for-production"
          echo "üîç Searching for packages with query: $PACKAGE_QUERY"

          PACKAGE_DATA=$(cloudsmith list package \
            ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }} \
            -q "$PACKAGE_QUERY" -F json)

          echo "$PACKAGE_DATA" | jq -r '.data[].identifier_perm' | while read -r IDENTIFIER; do
            if [ -n "$IDENTIFIER" ] && [ "$IDENTIFIER" != "null" ]; then
              echo "üöÄ Promoting package: $IDENTIFIER"

              cloudsmith mv --yes \
                ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_STAGING_REPO }}/$IDENTIFIER \
                ${{ env.CLOUDSMITH_NAMESPACE }}/${{ env.CLOUDSMITH_PRODUCTION_REPO }}

              if [ $? -eq 0 ]; then
                echo "‚úÖ Successfully promoted package: $IDENTIFIER"
              else
                echo "‚ùå Failed to promote package: $IDENTIFIER"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è No valid package identifiers found for promotion."
            fi
          done
        shell: bash